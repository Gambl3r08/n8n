# Simplified Dockerfile for n8n deployment in Minikube
# Uses existing node user from base image to avoid conflicts

FROM node:22-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ cairo-dev jpeg-dev pango-dev giflib-dev

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY packages ./packages
COPY patches ./patches
COPY scripts ./scripts

# Install pnpm
RUN npm install -g pnpm@10.12.1

# Install git (required for prepare script)
RUN apk add --no-cache git

# Install dependencies and build (skip lefthook in Docker)
ENV DOCKER_BUILD=1
RUN pnpm install --frozen-lockfile
RUN pnpm build

# Production stage
FROM node:22-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    tini \
    su-exec \
    cairo \
    jpeg \
    pango \
    giflib \
    python3 \
    make \
    g++ \
    sqlite \
    wget

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=node:node /app/packages/cli/dist ./dist
COPY --from=builder --chown=node:node /app/packages/cli/package.json ./
COPY --from=builder --chown=node:node /app/node_modules ./node_modules

# Install only production dependencies for CLI
RUN npm install --only=production

# Create necessary directories and set permissions
RUN mkdir -p /home/node/.n8n /app/data && \
    chown -R node:node /app /home/node/.n8n

# Set environment variables
ENV NODE_ENV=production
ENV N8N_USER_FOLDER=/home/node/.n8n
ENV WEBHOOK_URL=http://localhost:5678/
ENV N8N_PORT=5678
ENV N8N_PROTOCOL=http
ENV N8N_HOST=0.0.0.0

# Expose port
EXPOSE 5678

# Switch to non-root user
USER node

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1

# Use tini as init system
ENTRYPOINT ["tini", "--"]

# Start n8n
CMD ["node", "./dist/index.js"]
